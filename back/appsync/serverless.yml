service: dailyidea-appsync-backend

provider:
  name: aws
  runtime: 'python3.6'
  stage: ${env:STAGE, 'local'}
  emailStaticBucketName: dailyidea-serverless-email-static-${self:provider.stage}
  region: ${env:AWS_REGION, 'us-east-1'}
  domainName: ${env:DOMAIN_NAME, 'beta.dailyidea.com'}
  environment:
    SES_AWS_REGION: ${self:provider.region}
    MAILBOX_ADDR: ${self:custom.ideasMailBox}@${self:provider.domainName}

plugins:
  - serverless-offline
  - serverless-appsync-plugin
  - serverless-python-requirements

functions:
  getLikedIdeas:
    handler: functions.get_liked_ideas.get_liked_ideas.endpoint
    role: LambdaGetLikedIdeasFunctionRole
    memorySize: 512
    environment:
      LIKES_TABLE_NAME: ${self:custom.likesTableName}
      IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
  updateProfileInfo:
    handler: functions.update_profile_info.update_profile_info.endpoint
    role: LambdaUpdateProfileInfoFunctionRole
    environment:
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      SET_USERS_SLUG_FUNCTION_NAME: ${self:custom.setUsersSlugFunctionName}
      UPDATE_PROFILE_INFO_IN_CREATED_IDEAS_FUNCTION_NAME: ${self:custom.updateProfileInfoInCreatedIdeasFunctionName}
  setUsersSlug:
    handler: functions.set_users_slug.set_users_slug.endpoint
    role: LambdaSetUsersSlugFunctionRole
    environment:
      USERS_TABLE_NAME: ${self:custom.usersTableName}
  updateProfileInfoInCreatedIdeas:
    handler: functions.update_profile_info_in_created_ideas.update_profile_info_in_created_ideas.endpoint
    role: LambdaUpdateProfileInfoInCreatedIdeasFunctionRole
    memorySize: 512
    timeout: 60
    environment:
      IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
  createIdea:
    handler: functions.create_idea.create_idea.endpoint
    role: LambdaCreateIdeaFunctionRole
    environment:
      IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      TAGS_TABLE_NAME: ${self:custom.tagsTableName}
  updateIdea:
    handler: functions.update_idea.update_idea.endpoint
    role: LambdaUpdateIdeaFunctionRole
    environment:
      IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      TAGS_TABLE_NAME: ${self:custom.tagsTableName}
  developmentLogger:
    handler: functions.development_logger.development_logger.endpoint
    role: LambdaDevelopmentLoggerFunctionRole
    memorySize: 128
  shareIdea:
    role: LambdaShareIdeaFunctionRole
    handler: functions.share_idea.share_idea.endpoint
    memorySize: 512
    environment:
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      DOMAIN_NAME: ${self:provider.domainName}
      IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      TAGS_TABLE_NAME: ${self:custom.tagsTableName}


custom:
  cogintoUserPoolId: ${env:COGNITO_POOL_ID}
  usersTableName: dailyidea-users-${self:provider.stage}
  ideasTableName: dailyidea-ideas-${self:provider.stage}
  tagsTableName: dailyidea-tags-${self:provider.stage}
  ideaCommentsTableName: dailyidea-comments-${self:provider.stage}
  likesTableName: dailyidea-likes-${self:provider.stage}
  followingTableName: dailyidea-following-${self:provider.stage}
  ideasMailBox: ${env:IDEAS_MAILBOX, 'ideas-dev'}
  secretToken: ${env:SECRET_TOKEN, 'secret-tk1x'}
  setUsersSlugFunctionName: dailyidea-appsync-backend-${self:provider.stage}-setUsersSlug
  updateProfileInfoInCreatedIdeasFunctionName: dailyidea-appsync-backend-${self:provider.stage}-updateProfileInfoInCreatedIdeas
  pythonRequirements:
    dockerizePip: non-linux
    pythonBin: /home/orion/envs/idea36/bin/python
  appSync:
    # name:  # defaults to api
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      defaultEffect: ALLOW
      userPoolId: ${self:custom.cogintoUserPoolId}
    additionalAuthenticationProviders:
      - authenticationType: API_KEY

    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: Ideas
        type: Query
        field: getMyIdea
        request: "getMyIdea-request-mapping-template.txt"
        response: "getMyIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Query
        field: getUsersIdea
        request: "getUsersIdea-request-mapping-template.txt"
        response: "getUsersIdea-response-mapping-template.txt"
      - dataSource: Ideas
        type: Query
        field: ideas
        request: "ideas-request-mapping-template.txt"
        response: "ideas-response-mapping-template.txt"
      - dataSource: Ideas
        type: Query
        field: getPublicIdeas
        request: "getPublicIdeas-request-mapping-template.txt"
        response: "getPublicIdeas-response-mapping-template.txt"
      - dataSource: Ideas
        type: Query
        field: getUsersIdeas
        request: "getUsersIdeas-request-mapping-template.txt"
        response: "getUsersIdeas-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: toggleIdeaVisibility
        request: "ideas/toggle-visibility/toggleIdeaVisibility-request-mapping-template.txt"
        response: "ideas/toggle-visibility/toggleIdeaVisibility-response-mapping-template.txt"

      - dataSource: Ideas
        type: Query
        field: userIdeas
        request: "userIdeas-request-mapping-template.txt"
        response: "userIdeas-response-mapping-template.txt"
      - dataSource: Users
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"
      - dataSource: Users
        type: Query
        field: getEmailNotificationsSettings
        request: "getEmailNotificationsSettings-request-mapping-template.txt"
        response: "getEmailNotificationsSettings-response-mapping-template.txt"
      - dataSource: Users
        type: Query
        field: userInfo
        request: "common/before-mapping-template.txt"
        response: "common/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - userInfo
          - isFollowingByMe
          - followsMe
      - dataSource: Users
        type: Mutation
        field: updateEmailNotificationsSettings
        request: "updateEmailNotificationsSettings-request-mapping-template.txt"
        response: "updateEmailNotificationsSettings-response-mapping-template.txt"
      - dataSource: IdeaComments
        type: Mutation
        field: deleteComment
        request: "idea-comments/delete-comment/before-mapping-template.txt"
        response: "idea-comments/delete-comment/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - deleteIdeaCommentItem
          - decreaseIdeaCommentsCount
      - dataSource: IdeaComments
        type: Mutation
        field: addComment
        request: "idea-comments/add-comment/before-mapping-template.txt"
        response: "idea-comments/add-comment/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - createIdeaCommentItem
          - increaseIdeaCommentsCount
      - dataSource: IdeaComments
        type: Query
        field: getComments
        request: "idea-comments/getComments-request-mapping-template.txt"
        response: "idea-comments/getComments-response-mapping-template.txt"
      - dataSource: Ideas
        type: Mutation
        field: deleteIdea
        request: "common/before-mapping-template.txt"
        response: "common/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - deleteIdeaItem
          - decreaseIdeasCreatedCount
      - dataSource: UpdateIdeaHandler
        type: Mutation
        field: updateIdea
        request: "updateIdea-request-mapping-template.txt"
        response: "updateIdea-response-mapping-template.txt"
      - dataSource: Tags
        type: Mutation
        field: deleteTag
        request: "deleteTag-request-mapping-template.txt"
        response: "deleteTag-response-mapping-template.txt"
      - dataSource: Tags
        type: Mutation
        field: addTags
        request: "addTags-request-mapping-template.txt"
        response: "addTags-response-mapping-template.txt"
      - dataSource: Tags
        type: Query
        field: ideaTags
        request: "getIdeaTags-request-mapping-template.txt"
        response: "getIdeaTags-response-mapping-template.txt"
      - dataSource: Likes
        type: Mutation
        field: likeIdea
        request: "like-idea/before-mapping-template.txt"
        response: "like-idea/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - createLikedIdeaItem
          - increaseIdeaLikesCount
      #          - logResults
      - dataSource: Likes
        type: Mutation
        field: unlikeIdea
        request: "unlike-idea/before-mapping-template.txt"
        response: "unlike-idea/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - deleteLikedIdeaItem
          - decreaseIdeaLikesCount
      - type: Query
        field: getLikedIdeas
        dataSource: LikedIdeasHandler
        request: "getLikedIdeas-request-mapping-template.txt"
        response: "getLikedIdeas-response-mapping-template.txt"
      - dataSource: CreateIdeaHandler
        type: Mutation
        field: createIdea
        request: "createIdea-request-mapping-template.txt"
        response: "createIdea-response-mapping-template.txt"
      - dataSource: UpdateProfileInfoHandler
        type: Mutation
        field: updateProfileInfo
        request: "common/before-invoke-mapping-template.txt"
        response: "common/after-invoke-mapping-template.txt"
      - type: Mutation
        field: shareIdea
        dataSource: ShareIdeaHandler
        request: "common/before-invoke-mapping-template.txt"
        response: "common/after-invoke-mapping-template.txt"
      - dataSource: Likes
        type: Query
        field: getIsIdeaLikedByMe
        request: "getIsIdeaLikedByMe-request-mapping-template.txt"
        response: "getIsIdeaLikedByMe-response-mapping-template.txt"
      - dataSource: Users
        type: Mutation
        field: followUser
        request: "common/before-mapping-template.txt"
        response: "common/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - addFollowingItem
          - increaseFollowersCount
          - increaseFolloweesCount
      - dataSource: Ideas
        type: Mutation
        field: makeIdeaPrivate
        request: "common/before-mapping-template.txt"
        response: "common/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - setIdeaVisibilityToPrivate
      - dataSource: Ideas
        type: Mutation
        field: makeIdeaPublic
        request: "common/before-mapping-template.txt"
        response: "common/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - setIdeaVisibilityToPublic
      - dataSource: Users
        type: Mutation
        field: unfollowUser
        request: "common/before-mapping-template.txt"
        response: "common/after-mapping-template.txt"
        kind: PIPELINE
        functions:
          - deleteFollowingItem
          - decreaseFollowersCount
          - decreaseFolloweesCount
    #      - dataSource: RequestLink
    #        type: Mutation
    #        field: requestLogin
    #        request: "requestLogin-request-mapping-template.txt"
    #        response: "requestLogin-response-mapping-template.txt"
    # schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: LikedIdeasHandler
        description: 'Lambda Liked Ideas Data Source'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GetLikedIdeasLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: CreateIdeaHandler
        description: 'Create Idea and Tags'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [CreateIdeaLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: UpdateIdeaHandler
        description: 'Update Idea and Tags'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [UpdateIdeaLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: ShareIdeaHandler
        description: 'Share Idea to email'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [ShareIdeaLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: UpdateProfileInfoHandler
        description: 'Update profile name and bio'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [UpdateProfileInfoLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: DevelopmentLoggerHandler
        description: 'Development purposes only. Insert into pipeline to log what are happening there=)'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [DevelopmentLoggerLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users table'
        config:
          tableName: ${self:custom.usersTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Following
        description: 'Following table'
        config:
          tableName: ${self:custom.followingTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Ideas
        description: 'Ideas table'
        config:
          tableName: ${self:custom.ideasTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: IdeaComments
        description: 'Idea Comments table'
        config:
          tableName: ${self:custom.ideaCommentsTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Tags
        description: 'Tags table'
        config:
          tableName: ${self:custom.tagsTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Likes
        description: 'Likes table'
        config:
          tableName: ${self:custom.likesTableName}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
    functionConfigurations:
      - dataSource: Likes
        name: createLikedIdeaItem
        request: 'like-idea/createLikedIdeaItem-request-mapping-template.txt'
        response: 'like-idea/createLikedIdeaItem-response-mapping-template.txt'
      - dataSource: Likes
        name: deleteLikedIdeaItem
        request: 'unlike-idea/deleteLikedIdeaItem-request-mapping-template.txt'
        response: 'unlike-idea/deleteLikedIdeaItem-response-mapping-template.txt'
      - dataSource: Ideas
        name: increaseIdeaLikesCount
        request: 'like-idea/increaseIdeaLikesCount-request-mapping-template.txt'
        response: 'like-idea/increaseIdeaLikesCount-response-mapping-template.txt'
      - dataSource: Ideas
        name: decreaseIdeaLikesCount
        request: 'unlike-idea/decreaseIdeaLikesCount-request-mapping-template.txt'
        response: 'unlike-idea/decreaseIdeaLikesCount-response-mapping-template.txt'
      - dataSource: DevelopmentLoggerHandler
        name: logResults
        request: 'development-logger/request-request-mapping-template.txt'
        response: 'development-logger/response-response-mapping-template.txt'
      - dataSource: IdeaComments
        name: createIdeaCommentItem
        request: 'idea-comments/add-comment/createIdeaCommentItem-request-mapping-template.txt'
        response: 'idea-comments/add-comment/createIdeaCommentItem-response-mapping-template.txt'
      - dataSource: Ideas
        name: increaseIdeaCommentsCount
        request: 'idea-comments/add-comment/increaseIdeaCommentsCount-request-mapping-template.txt'
        response: 'idea-comments/add-comment/increaseIdeaCommentsCount-response-mapping-template.txt'
      - dataSource: IdeaComments
        name: deleteIdeaCommentItem
        request: 'idea-comments/delete-comment/deleteIdeaCommentItem-request-mapping-template.txt'
        response: 'idea-comments/delete-comment/deleteIdeaCommentItem-response-mapping-template.txt'
      - dataSource: Ideas
        name: decreaseIdeaCommentsCount
        request: 'idea-comments/delete-comment/decreaseIdeaCommentsCount-request-mapping-template.txt'
        response: 'idea-comments/delete-comment/decreaseIdeaCommentsCount-response-mapping-template.txt'

      - dataSource: Following
        name: addFollowingItem
        request: 'user-following/follow-user/addFollowingItem-request-mapping-template.txt'
        response: 'user-following/follow-user/addFollowingItem-response-mapping-template.txt'
      - dataSource: Users
        name: increaseFollowersCount
        request: 'user-following/follow-user/increaseFollowersCount-request-mapping-template.txt'
        response: 'user-following/follow-user/increaseFollowersCount-response-mapping-template.txt'
      - dataSource: Users
        name: increaseFolloweesCount
        request: 'user-following/follow-user/increaseFolloweesCount-request-mapping-template.txt'
        response: 'user-following/follow-user/increaseFolloweesCount-response-mapping-template.txt'

      - dataSource: Following
        name: deleteFollowingItem
        request: 'user-following/unfollow-user/deleteFollowingItem-request-mapping-template.txt'
        response: 'user-following/unfollow-user/deleteFollowingItem-response-mapping-template.txt'
      - dataSource: Users
        name: decreaseFollowersCount
        request: 'user-following/unfollow-user/decreaseFollowersCount-request-mapping-template.txt'
        response: 'user-following/unfollow-user/decreaseFollowersCount-response-mapping-template.txt'
      - dataSource: Users
        name: decreaseFolloweesCount
        request: 'user-following/unfollow-user/decreaseFolloweesCount-request-mapping-template.txt'
        response: 'user-following/unfollow-user/decreaseFolloweesCount-response-mapping-template.txt'

      - dataSource: Users
        name: userInfo
        request: 'user-info/user-info/userInfo-request-mapping-template.txt'
        response: 'user-info/user-info/userInfo-response-mapping-template.txt'
      - dataSource: Following
        name: isFollowingByMe
        request: 'user-info/is-following/isFollowingByMe-request-mapping-template.txt'
        response: 'user-info/is-following/isFollowingByMe-response-mapping-template.txt'
      - dataSource: Following
        name: followsMe
        request: 'user-info/follows/followsMe-request-mapping-template.txt'
        response: 'user-info/follows/followsMe-response-mapping-template.txt'

      - dataSource: Ideas
        name: deleteIdeaItem
        request: 'ideas/delete-idea/deleteIdeaItem-request-mapping-template.txt'
        response: 'ideas/delete-idea/deleteIdeaItem-response-mapping-template.txt'

      - dataSource: Users
        name: decreaseIdeasCreatedCount
        request: 'ideas/delete-idea/decreaseIdeasCreatedCount-request-mapping-template.txt'
        response: 'ideas/delete-idea/decreaseIdeasCreatedCount-response-mapping-template.txt'
      - dataSource: Ideas
        name: setIdeaVisibilityToPrivate
        request: 'idea-visibility/setIdeaVisibilityToPrivate-request-mapping-template.txt'
        response: 'idea-visibility/setIdeaVisibilityToPrivate-response-mapping-template.txt'
      - dataSource: Ideas
        name: setIdeaVisibilityToPublic
        request: 'idea-visibility/setIdeaVisibilityToPublic-request-mapping-template.txt'
        response: 'idea-visibility/setIdeaVisibilityToPublic-response-mapping-template.txt'

#      - type: AWS_LAMBDA
#        name: RequestLink
#        description: 'Lambda DataSource'
#        config:
#          lambdaFunctionArn:
#            Fn::GetAtt:
#              - RequestLoginLambdaFunction
#              - Arn
#          serviceRoleArn:
#            Fn::GetAtt:
#              - AppSyncServiceRole
#              - Arn


resources:
  - Resources:
      LambdaGetLikedIdeasFunctionRole: ${file(functions/get_liked_ideas/function_role.yml):LambdaGetLikedIdeasFunctionRole}
      LambdaCreateIdeaFunctionRole: ${file(functions/create_idea/function_role.yml):LambdaCreateIdeaFunctionRole}
      LambdaUpdateProfileInfoFunctionRole: ${file(functions/update_profile_info/function_role.yml):LambdaUpdateProfileInfoFunctionRole}
      LambdaSetUsersSlugFunctionRole: ${file(functions/set_users_slug/function_role.yml):LambdaSetUsersSlugFunctionRole}
      LambdaUpdateProfileInfoInCreatedIdeasFunctionRole: ${file(functions/update_profile_info_in_created_ideas/function_role.yml):LambdaUpdateProfileInfoInCreatedIdeasFunctionRole}
      LambdaUpdateIdeaFunctionRole: ${file(functions/update_idea/function_role.yml):LambdaUpdateIdeaFunctionRole}
      LambdaDevelopmentLoggerFunctionRole: ${file(functions/development_logger/function_role.yml):LambdaDevelopmentLoggerFunctionRole}
      LambdaShareIdeaFunctionRole: ${file(functions/share_idea/function_role.yml):LambdaShareIdeaFunctionRole}
      AppSyncLambdaServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: "Lambda-AppSyncServiceRole"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "appsync.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: "Lambda-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource:
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-getLikedIdeas"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-getLikedIdeas:*"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-createIdea"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-createIdea:*"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-updateIdea"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-updateIdea:*"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-shareIdea"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-shareIdea:*"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-developmentLogger"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-developmentLogger:*"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-updateProfileInfo"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-updateProfileInfo:*"

      AppSyncServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: "Dynamo-Lambda-AppSyncServiceRole"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "appsync.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: "Dynamo-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "dynamodb:Query"
                      - "dynamodb:BatchWriteItem"
                      - "dynamodb:GetItem"
                      - "dynamodb:DeleteItem"
                      - "dynamodb:PutItem"
                      - "dynamodb:Scan"
                      - "dynamodb:UpdateItem"
                    Resource:
                      - { "Fn::GetAtt": ["TagsTable", "Arn" ] }
                      - { "Fn::GetAtt": ["LikesTable", "Arn" ] }
                      - { "Fn::GetAtt": ["IdeaCommentsTable", "Arn" ] }
                      - { "Fn::GetAtt": ["FollowingTable", "Arn" ] }
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.usersTableName}'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.usersTableName}/*'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.ideasTableName}'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.ideasTableName}/*'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.tagsTableName}/*'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.likesTableName}/*'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.ideaCommentsTableName}'
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'table/${self:custom.ideaCommentsTableName}/*'
            - PolicyName: "Lambda-AppSyncServiceRole-Policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:invokeFunction"
                    Resource:
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-requestLogin"
                      - "arn:aws:lambda:${self:provider.region}:*:function:dailyidea-appsync-backend-${self:provider.stage}-requestLogin:*"
                  - Effect: Allow
                    Action:
                      - ses:SendEmail
                    Resource: "*"
  - ${file(resources/dynamo-tags-table.yml)}
  - ${file(resources/dynamo-likes-table.yml)}
  - ${file(resources/dynamo-comments-table.yml)}
  - ${file(resources/dynamo-following-table.yml)}

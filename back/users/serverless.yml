service: dailyidea-users-service

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:STAGE, 'dev'}
  region: ${env:AWS_REGION, 'us-east-1'}
  domainName: ${env:DOMAIN_NAME, 'beta.dailyidea.com'}
  emailStaticBucketName: dailyidea-serverless-email-static-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:SendEmail
        - lambda:InvokeFunction
      Resource: "*"

custom:
  usersTableName: dailyidea-users-${self:provider.stage}
  ideasMailBox: ${env:IDEAS_MAILBOX, 'ideas-dev'}
  secretToken: ${env:SECRET_TOKEN, 'secret-tk1x'}
  localstack:
    host: http://localhost
    debug: true
    stages:
      - local
    endpoints:
      S3: http://localhost:4572
      DynamoDB: http://localhost:4570
      CloudFormation: http://localhost:4581
      Elasticsearch: http://localhost:4571
      ES: http://localhost:4578
      SNS: http://localhost:4575
      SQS: http://localhost:4576
      Lambda: http://localhost:4574
      Kinesis: http://localhost:4568

functions:
  requestLogin:
    handler: src/requestLogin.handler
    role: CustomUserOnboardingRole
    environment:
      DOMAIN_NAME: ${self:provider.domainName}
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      SES_REGION: ${self:provider.region}
      DYNAMO_REGION: ${self:provider.region}
      SOURCE_EMAIL: ${self:custom.ideasMailBox}@${self:provider.domainName}
      SECRET_TOKEN: ${self:custom.secretToken}
      TABLE_NAME: ${self:custom.usersTableName}
    events:
      - http:
          path: requestLogin
          method: post
          cors: true
  defineAuthChallenge:
    handler: src/defineAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: DefineAuthChallenge
    environment:
      SES_REGION: ${self:provider.region}
  preSignUp:
    handler: src/preSignUp.handler
    role: CustomUserOnboardingRole
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: PreSignUp
          existing: true
    environment:
      USER_POOL_ID:  !ImportValue "CognitoUserPool::Id"
  postAuthentication:
    handler: src/postAuthentication.handler
    role: CustomUserOnboardingRole
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: PostAuthentication
          existing: true
    environment:
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      SEND_DAILY_TO_USER_FUNCTION_NAME: arn:aws:lambda:${self:provider.region}:133662108267:function:dailyidea-mail-processing-${self:provider.stage}-sendDailyToUser
      REGION: ${self:provider.region}
  createAuthChallenge:
    handler: src/createAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: CreateAuthChallenge
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource: "*"
  verifyAuthChallenge:
    handler: src/verifyAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: VerifyAuthChallengeResponse
    environment:
      SECRET_TOKEN: ${self:custom.secretToken}
  customMessage:
    handler: src/customMessage.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: CustomMessage
    environment:
      DOMAIN_NAME: ${self:provider.domainName}
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
  userToDynamoDB:
    handler: src/cognitoToDDB.handler
    role: CustomUserOnboardingRole
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: PostConfirmation
    environment:
      TABLE_NAME: ${self:custom.usersTableName}
      REGION: ${self:provider.region}
      SET_USERS_SLUG_FUNCTION_NAME: arn:aws:lambda:${self:provider.region}:133662108267:function:dailyidea-appsync-backend-${self:provider.stage}-setUsersSlug


plugins:
  - serverless-localstack
  - serverless-offline
  - serverless-prune-plugin

resources:
  - ${file(resources/dynamo-user-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
